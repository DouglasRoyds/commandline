git config -l                                         List: it's all in .git/config and ~/.gitconfig
git config user.name
git config user.email                                 Display, just for this repository
git config --global user.email                        From ~/.gitconfig, rather than the repository .git/config
git config --global user.email username@server.fake   Write into ~/.gitconfig
git config --unset user.email                         Remove the repository-local setting (from .git/config)
                                                      All git commands can take -c before the verb
                                                          -c user.name='Douglas Royds'
                                                          -c user.email='douglas.royds@emailhost.com'
git config --get-regexp alias                         List all aliases

git init                                     Create a local git repository
git clone URL
git clone URL directory/
git pull                                     Update from remote repository (ie. fetch and merge)
                                                -r --rebase    Rebase local branch on top of the remote branch
git pull origin branchname                   Merge all changes from the remote branch into my current local branch
git pull origin remotebranch:localbranch     Pull all changes from the remote branch into the local branch,
                                             eg. git pull origin master:master, while checked out on some other branch.
                                             Fast-forward only.

git remote -v                                List all remote repositories, complete with URLs
git remote show origin                       Even more detail
git remote add origin URL                    Hooks this local git repository to the remote repository at URL
git remote add shortname URL                 Shortname stands in for the URL in later fetches
                                                -t master      Track only this branch
                                                --no-tags      Don't clutter up my git branch -avv output
git remote rename thisname thatname
git remote rm somename
git remote set-url origin URL                Change the URL (as opposed to adding a new one)
git fetch                                    Update local repository without merging
git fetch remotename
git fetch remotename remotebranch            Fetch only this branch, rather than the lot
git merge remotename/remotebranch            Merge newly-fetched remote changes into current local branch
                                                --ff-only      Only if the changes can be fast-forwarded
git fetch remotename remotebranch:localbranch   Update local repository and fast-forward merge the
                                                remote sourcebranch into localbranch, in one go.
git push                                     Push committed changes to the default remote server
git push origin master                       Push committed changes to the origin remote server, on branch master

git log
                                                -5             Limit
                                                --stat         Git-style stats (files, lines changed)
                                                --full-diff    When a file or directory name is specified,
                                                               list all files affected by each commit
                                                --author=name  Filter by name (or part of name)
                                                --since=date
                                                --until=date
                                                --grep=regex      Filter by log message
                                                -S"string"     Commits that introduce or remove a line
                                                -G"regex"      Commits that introduce, remove, or change a line
git log -p                                   With diffs
                                                -D             No diffs for file deletions
                                                -M             No diffs for renames (moves)
git log --stat --diff-filter=D               Show all file deletions
git log -- filename                          Show history of a deleted file
git log --follow filename                    History of one file, even across renames
git log --oneline --decorate                 One line per commit, with branch and tag markers
                                                --graph        Branch/merge graph in the left margin
                                                --all          All branches, not just the current one
                                                --first-parent Only the current branch, ie. hide other branches
git log commitsum -- filename                Starting with the given commit
git log here..there                          Just between the two commits
git log master..branch                       Commits made only on this branch
git log master..                             If we are on the branch
git log origin..                             Commits that are yet to be pushed

git status
git add filename                             Stage changes to this file
git add -p                                   Interactively select which hunks are to be staged
git diff filename                            Unstaged mods only
git diff --staged                            Which changes are already staged?
git commit                                   Commit staged changes
git commit -v                                Show diffs in the commit editor
git commit filename -m"Comment"              Commit changes to this file, whether they are staged or not
git commit -am"Comment"                      Add and commit changes to all files that git knows about
git commit -m"Headline" -m"Content line"     Git doesn't see \n characters in the message as new lines
git commit --amend
git commit --amend -m"Comment"               Change the commit message of the most recent commit

git rm filename                              Delete
git rm --cached filename                     Delete from git, but keep the working copy
git rm --cached -r dirname

git reset --soft commitsum                   Revert to this commit, but leave local changes staged
git reset --mixed commitsum                  Revert to this commit, remove from staging, but leave working copy intact
git reset --hard commitsum                   Revert to this commit, remove from staging, and undo working copy changes
git reset commitsum                             --mixed is the default
git clean -fd                                Delete all unknown files, except those in .gitignore
                                                -d    Directories as well
git reset filename                           Unstage a file, keeping local changes (default --mixed)
git reset --hard HEAD                        Revert everything to the most recent commit, undoing all working copy changes
git reset --hard HEAD~1                      Delete the last commit completely, undoing all working copy changes
git push --force                             Force the deletion up if you'd already pushed it, however,
                                             if others have pulled it, they will push it back up again. Better to use ...
git revert commitsum                         Generates the reverse commit
                                                -n, --no-commit   Just leaves it as local mods

git checkout -- filename                     Revert local mods
git checkout commitsum filename              Roll file back to this commit
git checkout HEAD~2 filename                 Roll file back by two
git checkout master filename                 Roll file forward to the HEAD of this branch
git checkout master^ filename                Roll file back to the parent of the HEAD of this branch
                                                --    Everything after this is a filename,
                                                      just in case there's a branch with this name

git show commitsum:filename                  Cat to stdout
git show branchname:filename                    filename    Fully-qualified

git stash                                    All local mods, including any staged files.
git stash list
git stash show                               Log-style
                                                -p    With diffs
git stash pop                                Reapply
git stash pop stash@{2}                      Reapply stash 2
git stash drop                               Ditch it
git stash branch branchname                  Branch from the original stashpoint, reapply the stash

git branch branchname                        Creates the branch without switching to it
git checkout branchname                      Note the potential ambiguity with filenames
                                                -f    Force: throw away local changes
git checkout -b newbranch                    Create and switch to the new branch in one go
git push -u origin branchname                Push the branch up, and make it the default tracking branch
git checkout --track remote/branchname       Makes this existing remote branch the default pull branch
git branch -u origin/master                  Set the existing upstream branch to push/pull for an existing local branch
                                                -u    --set-upstream
git branch                                   List local branches
                                                -a    Both local and remote
                                                -v    With the commit sum and line for each branch as well
                                                -vv   With remote tracking branch, and ahead/behind
git branch --list pattern                    Pattern is a shell glob
git branch --list -r remote/pattern             -r    Remote branches
git branch -m oldname newname                Rename (move)
git branch -m newname                        If you're already on the old branch
git branch -d branchname                     Delete (locally)
                                                -D    If it hasn't been merged onto any other branch,
                                                      ie. we're really discarding it
git branch -dr remotename/branchname         Delete local remote-tracking branch
                                                -r --remotes
git push origin --delete branchname          Delete (remote)
git remote prune origin                      Delete stale remote-tracking branches

git rev-parse HEAD                           Parse to a revision: What revision am I on?
                                                --short              Just 10 characters from the shasum
                                             These options take no commitish:
                                                --git-dir            Relative or fully-qualified
                                                --absolute-git-dir   Fully-qualified
                                                --is-inside-work-tree

git branch --show-current
git rev-parse --abbrev-ref HEAD              What branch am I on the HEAD of?
git branch --contains HEAD                   When I'm rolled back off the head, which branches contain this (local) HEAD?
                                                -a    Local or remote

                                             Oops, I committed on a detached HEAD
git rebase master                            Bring my commits up to date
git branch -f master                         Make my (detached) commits the HEAD of the master, as if I had committed them there
git branch -f master commitish               We can set the master branch to point to anything we like, in practice
git checkout master

git rebase commitish                         Rebase the current branch on top of the named branch
                                             Need to git push --force after a rebase
                                                -i    Interactive, allows us to take an action on each commit as we go.
                                                      See https://www.git-scm.com/book/en/v2/Git-Tools-Rewriting-History
git rebase --onto targetbranch fromhere tohere

git notes add                                Current HEAD commit
git notes add commitsum                      Edits the existing note, if any
git notes list                               Note ref and commit ref
git notes remove commitsum                   Remove notes by commit ref
git push origin refs/notes/*                 Push 'em up (notes are not pushed by default)
git config --global --add remote.origin.fetch +refs/notes/*:refs/notes/*
                                             Fetch notes by default

git tag                                      List all tags
                                                -n    Also display the first line of annotation
                                                -n20     ... the first 20 lines
git tag tagname
                                                -a    Annotated tag, ie. one that has a message and that
                                                      is useful to git describe. Prompt me.
                                                -m    Here is the message for an annotated tag (-a is implied)
git push origin tagname                      Tags are not pushed by default git push
git tag -d tagname                           Delete local tag
git push origin --delete tagname
git rev-list -n1 tagname                     Which commit does the tag point at?

git submodule add url
cd dirname                                   After a normal clone, the submodule will not be populated
   git submodule init                        
   git submodule update
git clone --recursive toplevelurl            Easier to recursively pull in submodules at clone time
git submodule status                         Oneline status for each submodule
git submodule foreach 'git remote -v'        Run a shell command on each submodule
git submodule update --init --recursive      Fetch and checkout the correct revision of all submodules
git diff --submodule                         What changed?

git remote add remotename url
git fetch remotename
git subtree add  -P relative/path remotename master
git subtree pull -P relative/path remotename master
                                                      --squash       Don't commonly want the entire remote history added to this repo
git fetch remotename                               Get the latest remote changes
git subtree merge -P relative/path commitish       Merge them into the parent repo

cd repository1
git log --pretty=email --patch-with-stat --reverse --full-index --binary > ~/history.patch
cd repository2
git am < ~/history.patch                     Copy with full history from repository1 into repository2
                                                -- pathname    Named files only

git format-patch commitsum                   Generate patch files for *every* commit from here up to the head
                                                -1    Just the one, thanks
git apply patchfile

git bisect start
git bisect bad                               Current revision is bad
git bisect good commitsum                    This revision is known good
git bisect skip commitsum                    This revision is broken, eg. known not to compile
git bisect run script args                   Do the bisection, running this script to test for goodness
git bisect reset                             All done, clean up

